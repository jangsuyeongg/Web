<!DOCTYPE html>
<html>
<head>
<meta charset="UTF-8">
<title>Insert title here</title>

	<style>
		/* 구조 선택자 */
		
		/*
			:nth-child(n)
			정수
			2n 짝수
			2n+1 홀수
			3n 3의 배수
			3n+1 3으로 나눈 나머지가 1
			.
			.
			.
		*/
		ul>li:nth-child(2n) {
			background-color: pink;
		}
		ul>li:nth-child(2n+1) {
			background-color: orange;
		}
		ul>li:nth-child(3n+2) {
			color: white;
		}
		/*
			:first-child 첫 번째 자식 요소
			:last-child 마지막 자식 요소
		*/
		#title>li:first-child{
			color: red;
		}
		#title>li:last-child{
			color: green;
		}		
		
		/*
			:first-of-type 첫 번째 요소 선택
			:last-of-type 마지막 요소 선택
			:nth-of-type(n) n번째 요소 선택
			:not(selector) 괄호 안에 해당하지 않는 것들
		*/
		.s>h1:first-of-type {
			color: blue;
		}
		.s>h1:last-of-type {
			color: green;
		}
		.s>h2:nth-of-type(4n+3) {
			background-color: lightblue;
		}
		.s>h2:not([title=abc]) {
			color:red;
		}
		
		/* 
		텍스트에 스타일 적용
			::first-letter 첫 번째 문자
			::first-line 첫 번째 줄
			::selection 드래그하여 선택된 부분
		*/
		#txt::first-letter{
			color: red;
			font-size: 1.3em;
			background-color: yellow;
		}
		#txt::first-line{
			color: green;
			text-decoration: underline;
		}
		#txt::selection{
			color: red;
			background-color: black;
		}
		
	</style>

</head>
<!--
	마우스 우클릭 제어 속성
	oncontextmenu (return true/false)
	드래그 제어 속성
	onselectstart (return true/false)
-->
<body oncontextmenu="return false" onselectstart="return false">

	<ul id="title">
		<li>홈페이지</li>
		<li>자유게시판</li>
		<li>Q&A</li>
		<li>커뮤니티</li>
		<li>고객센터
			<ul>
				<li>자주 하는 질문</li>
				<li>문의사항</li>
			</ul>
		</li>
		<li>회사소개</li>
	</ul>
	
	<div class="s">
		<h1>구조선택자 AAA</h1>
		<h2 title="abc">구조선택자 111</h2>
		<h1>구조선택자 BBB</h1>
		<h2>구조선택자 222</h2>
		<h1>구조선택자 CCC</h1>
		<h2>구조선택자 333</h2>
		<h1>구조선택자 DDD</h1>
		<h2>구조선택자 444</h2>
	</div>
	
	<div id="txt">
		State Hook을 현재의 state와 동일한 값으로 갱신하는 경우 React는 자식을 렌더링 한다거나 무엇을 실행하는 것을 회피하고 그 처리를 종료합니다. (React는 Object.is 비교 알고리즘을 사용합니다.)
		실행을 회피하기 전에 React에서 특정 컴포넌트를 다시 렌더링하는 것이 여전히 필요할 수도 있다는 것에 주의하세요. React가 불필요하게 트리에 그 이상으로 「더 깊게」는 관여하지 않을 것이므로 크게 신경 쓰지 않으셔도 됩니다만, 만약 렌더링 시에 고비용의 계산을 하고 있다면 useMemo를 사용하여 그것들을 최적화할 수 있습니다.		
	</div>

</body>
</html>